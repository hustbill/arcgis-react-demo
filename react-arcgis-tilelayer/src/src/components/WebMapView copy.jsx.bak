import React, { useEffect, useRef } from 'react';
import { loadModules } from 'esri-loader';

export class WebMapView extends React.Component {
    constructor(props) {
        super(props);
        this.mapRef = React.createRef();
    }

    componentDidMount() {
        loadModules([
            "esri/Map",
            "esri/views/MapView",
            "esri/layers/TileLayer",
            "esri/widgets/LayerList",
          ], {css: true})
          .then(([Map, MapView, TileLayer, LayerList]) => { 
            /*****************************************************************
             * Create one TileLayer instance pointing to a cached map service
             * depicting World Imagery
             *****************************************************************/
            var worldImageryLayer = new TileLayer({
              url: 
                "http://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer",
              // This property can be used to uniquely identify the layer
              id: "0",
              opacity: 0.5,
              visible: true
            });
    
            /*****************************************************************
             * Layers may be added to the map in the map's constructor
             *****************************************************************/
            const map = new Map({
              basemap: 'topo-vector',
              layers: [worldImageryLayer]
            });
    
            var view = new MapView({
                container: this.mapRef.current,
                map: map,
                center: [-118, 34],
                zoom: 8
              });
           
    
            /*****************************************************************
             * The map handles the layers' data while the view and layer views
             * take care of rendering the layers
             *****************************************************************/
            view.on("layerview-create", function (event) {
              if (event.layer.id === 0) {
                // Explore the properties of the population layer's layer view here
                console.log(
                  "LayerView for World Imagery created!",
                  event.layerView
                );
              }
            });
    
            /*****************************************************************
             * Layers are promises that resolve when loaded, or when all their
             * properties may be accessed. Once the population layer has loaded,
             * the view will animate to it's initial extent.
             *****************************************************************/
            view.when(function () {
                worldImageryLayer.when(function () {
                view.goTo(worldImageryLayer.fullExtent).catch(function (error) {
                  if (error.name != "AbortError") {
                    console.error(error);
                  }
                });
              });
            });

             // create a layer list widget
            var layerList = new LayerList({
              view: view
            });

            view.ui.add(layerList, "top-right");

            this.view = view;
        });
        
    }

    componentWillUnmount() {
        if (this.view) {
            // destroy the map view
            this.view.destroy();
        }
    }

    render() {
        return (
            <div className="webmap" ref={this.mapRef} />
        );
    }
}